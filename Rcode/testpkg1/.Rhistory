w.in = y/sum(y)
cv1 = cv.glmnet(x, y , weights = w.in, lambda = 10^(seq(-2,2,by=0.1)), alpha = 1)
fit1 = glmnet(x,y,weights = w.in, lambda = cv1$lambda.min, alpha = 1)
#cv2 = cv.glmnet(x, y , weights = w.in, lambda = 10^(seq(-2,2,by=0.1)), alpha = 0.5)
#fit2 = glmnet(x,y,weights = w.in, lambda = cv2$lambda.min, alpha = 0.5)
#cv3 = cv.glmnet(x, y , weights = w.in, lambda = 10^(seq(-2,2,by=0.1)), alpha = 0)
#fit3 = glmnet(x,y,weights = w.in, lambda = cv3$lambda.min, alpha = 0)
#prod1 = predict(fit1, as.matrix(datP.use))
#prod2 = predict(fit2, as.matrix(datP.use))
# training and testing error
#pred.in = predict(fit3, as.matrix(dat.use.in))
#pred.out = predict(fit3, as.matrix(dat.use.out))
pred.in = predict(fit1, as.matrix(dat.use.in))
pred.out = predict(fit1, as.matrix(dat.use.out))
trainingerror = t(eProd.in - pred.in)%*% (eProd.in-pred.in)/length(eProd.in)
testingerror = t(eProd.out - pred.out)%*% (eProd.out-pred.out)/length(eProd.out)
error = c(trainingerror, testingerror)
return(error)
}
data = datP.use
data.kun = datP.use.kun
prod = log(eProd)
prod.kun = log(eProd.kun)
per.in = 0.8
iterN = 100;
errorComp = matrix(0, iterN, 4)
for(iter in 1:iterN){
set.seed(2976+iter)
samp<-sample(1:nrow(data),nrow(data)*per.in)
error1 = mypred(data, prod, samp)
errorComp[iter,1:2] = error1
error2 = mypred(data.kun, prod.kun, samp)
errorComp[iter,3:4] = error2
}
mean(errorComp[,1])
mean(errorComp[,2])
mean(errorComp[,3])
mean(errorComp[,4])
sd(errorComp[,1])
sd(errorComp[,2])
sd(errorComp[,3])
sd(errorComp[,4])
save.image("~/Documents/course_project/digeo/myproject/result_kun.RData")
load("~/Documents/course_project/digeo/myproject/result_kun.RData")
View(expectedLogDColNames)
split_data <- read.csv("~/Downloads/split_data.csv")
View(split_data)
split_data[1,1]
split_data[1,2]
split_data$ACEPUNCH[1]
split_data$ACEPUNCH[2]
split_data$acepunch[2]
split_data$acepunch[3]
split_data$acepunch[4]
num = length(which(split_data$acepunch == NA))
num = length(which(split_data$acepunch == "NA"))
split_data$acepunch[3] == NA
split_data$acepunch[3] == "NA"
split_data$poorhlth[4]
split_data$poorhlth[3]
split_data$poorhlth[3] == 88
split_data$poorhlth[4] == "NA"
is.na(split_data$acepunch[1:10])
sum(is.na(split_data$acepunch[1:10]))
sum(is.na(split_data$acepunch))
use_pt3 <- read.table("~/Documents/course_project/data_mining/use_pt3.txt", quote="\"")
View(use_pt3)
datP.use.cols = as.character(use_pt3)
fix(datP.use.cols)
View(use_pt3)
test1 = which(colnames(split_data) == use_pt3)
fix(test1)
test1 = which(colnames(split_data) == as.character(use_pt3[1]))
fix(test1)
View(use_pt3)
use_pt3[1]
use_pt3[1,]
test1 = as.matrix(use_pt3)
test2 = which(colnames(split_data) == test1)
test2 = which(colnames(split_data) == test1[1])
split_data[1,286]
colnames(split_data[,286])
colnames(split_data[,286:287])
colname(split_data[,286])
cols<-c()
for(i in 1:length(test1)){
use.i<-which(colnames(split_data)==test1[i])
cols<-c(cols,use.i)
}
split.use<-split_data[,cols]
weight.col.name <- read.table("~/Documents/course_project/data_mining/weight_col_name.txt", quote="\"")
View(weight.col.name)
test2 = as.matrix(weight.col.name)
cols<-c()
for(i in 1:length(test2)){
use.i<-which(colnames(split_data)==test2[i])
cols<-c(cols,use.i)
}
need.to.cal<-split_data[,cols]
!TRUE
as.numeric(FALSE)
after.cal = need.to.cal
n.obs = dim(need.to.cal)[1]
for(i in 1:length(test2)){
index.i = which(is.na(need.to.cal[,i]) == FALSE)
mean.i = mean(need.to.cal[index.i,i])
for(j in 1:n.obs){
if(is.na(need.to.cal[j,i]) = FALSE){
after.cal[j,i] = as.numeric(need.to.cal[j,i]>mean.i)
}
}
}
for(i in 1:length(test2)){
index.i = which(is.na(need.to.cal[,i]) == FALSE)
mean.i = mean(need.to.cal[index.i,i])
for(j in 1:n.obs){
if(is.na(need.to.cal[j,i]) == FALSE){
after.cal[j,i] = as.numeric(need.to.cal[j,i]>mean.i)
}
}
}
View(after.cal)
runif(1)
runif(2)
runif(1)
runif(1)
runif(1)
mat.with.NA = after.cal
n.obs = dim(after.cal)[1]
n.col = dim(after.cal)[2]
for(i in 1:n.col){
no.of.one = length(which(mat.with.NA[,i] == 1))
no.of.zero = length(which(mat.with.NA[,i] == 0))
ratio.i = no.of.one/(no.of.one+no.of.zero)
for(j in 1:n.obs){
if(is.na(mat.with.NA[j,i]) == TRUE){
rnum = runif(1)
if(rnum < ratio.i){
mat.with.NA[j,i] = 1
}
else{
mat.with.NA[j,i] = 0
}
}
}
}
View(mat.with.NA)
save.image("~/Documents/course_project/data_mining/interim1.RData")
setwd("~/Documents/course_project/digeo/myproject")
load("~/Documents/course_project/digeo/myproject/result_kun.RData")
error.kun <- read.csv("~/Downloads/EFProdData-GEO-9Oct12-error-Kun.csv")
View(error.kun)
sd(error.kun$SP_AC)
sd(error.kun$NPHI_AC)
View(expectedLogDColNames)
library("DIRLib", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
View(datP.kun)
View(datP)
mean(error.kun$SP_AC)
View(expectedLogDColNames)
mean(error.kun$NPHI_AC)
mean(error.kun$RHOB_AC)
mean(error.kun$DeltaT_AC)
mean(error.kun$GR_AC)
mean(error.kun$GRSD_AC)
mean(error.kun$GR75_AC)
View(prodD.full)
mean(datP.kun$GR75_AC)
View(error.kun)
predict.prod1<-function(data,model,vars,NBreaks=10,newcut=TRUE,breakPoints=NA,filename='test'){
cols.sel<-c()
for(i in 1:length(vars)){
use.i<-which(colnames(data)==(vars)[i])
if(length(use.i)==0){print(i)}
cols.sel<-c(cols.sel,use.i)
}
dat.pred<-data[,cols.sel]
pred<-model$coefficients[1]+rowSums(t(model$coefficients[-1]*t(dat.pred)))
if(0){
if(newcut==TRUE){
grade<-cut(pred,breaks=NBreaks,labels=rev(LETTERS[1:NBreaks]))
grade.breaks<-cut(pred,breaks=NBreaks)
labs <- levels(grade.breaks)
lower <- as.numeric(sub("\\((.+),.*", "\\1", labs))
upper <- as.numeric( sub("[^,]*,([^]]*)\\]", "\\1", labs))
breakPoints<-cbind(lower,upper)
rownames(breakPoints)<-levels(grade)
write.csv(breakPoints,file=paste(filename,'breakPoints.csv',sep=' '))
}else{
grade<-breakPointsToGrade(pred,breakPoints)
}
}
#out<-data.frame(pred,grade)
return(pred)
}#end func
varSelect1<-function(obj,vars,goal=1){
pop<-as.matrix(vars)
selected<-numeric(0)
R2.selected<-c()
if(goal>ncol(pop)){
goal<-ncol(pop)
}
for(k in 1:goal){
if(length(ncol(selected))==0){
r2s<-c()
for(i in 1:ncol(pop)){
m.i<-lm(obj~pop[,i])
r2.i<-summary(m.i)$r.squared
r2s<-c(r2s,r2.i)
}#end for i
maxR2<-which(r2s==max(r2s))
if(length(maxR2)>1){
cat('there was a tie','\n','\n')
maxR2=maxR2[1]
}
selected<-matrix(pop[,maxR2],ncol=1)
colnames(selected)<-colnames(pop)[maxR2]
R2.selected<-c(R2.selected,r2s[maxR2])
pop<-pop[,-maxR2]
}else{
r2s<-c()
for(j in 1:ncol(pop)){
m.j<-lm(obj~cbind(selected,pop[,j]))
r2.j<-summary(m.j)$r.squared
r2s<-c(r2s,r2.j)
}#end for i
maxR2<-which(r2s==max(r2s))
if(length(maxR2)>1){
cat('there was a tie','\n','\n')
maxR2=maxR2[1]
}
selected<-cbind(selected,pop[,maxR2])
colnames(selected)[k]<-colnames(pop)[maxR2]
R2.selected<-c(R2.selected,r2s[maxR2])
pop<-pop[,-maxR2]
}#end if/else
}#end for k
#file.R2s<-paste('R2',as.numeric(Sys.time()))
#write.csv(R2.selected,file=file.R2s)
#print(file.R2s)
return(selected)
}#end func
predDrilling <- function(data, prod, samp){
eProd.in<-prod[samp]
dat.use.in<-data[samp,]
eProd.out<-prod[-samp]
dat.use.out<-data[-samp,]
vars<-varSelect1(eProd.in,dat.use.in,30)
is.better<-c()
m.i1<-lm(eProd.in~vars[,1])
for(i in 2:ncol(vars)){
m.i0<-m.i1
m.i1<-lm(eProd.in~vars[,1:i])
test<-anova(m.i0,m.i1)
if(is.na(test$"Pr(>F)"[2])==TRUE){
is.better<-c(is.better,0)
}else{
if(test$"Pr(>F)"[2]>0.05){
is.better<-c(is.better,0)
}else{
is.better<-c(is.better,1)
}
}#end if/else
}#end for
use.vars<-max(which(is.better==1))+1
vars<-vars[,1:use.vars]
m<-lm(eProd.in~vars)
rm.var<-which(summary(m)$coefficients[,4]>0.05)
if(length(rm.var)>0){
vars<-vars[,-(rm.var-1)]
}
w.in<-eProd.in/sum(eProd.in)
m<-lm(eProd.in~vars, weights=w.in)
# training error and test error
pred.in <- predict.prod1(dat.use.in,m,colnames(vars))
trainingerror = t(eProd.in - pred.in)%*% (eProd.in-pred.in)/length(eProd.in)
pred.out<-predict.prod1(dat.use.out,m,colnames(vars))
testingerror = t(eProd.out - pred.out)%*% (eProd.out-pred.out)/length(eProd.out)
#pred<-predict.prod(datP.use,m,colnames(vars),NBreaks=10,filename=bm)
error = c(trainingerror, testingerror)
return(error)
}
View(datP.use)
View(datP.use.kun)
compare <- function(data, prod, iterN){
errorM = matrix(0, iterN, 4)
for(iter in 1:iterN){
set.seed(1976+iter)
samp<-sample(1:nrow(data),nrow(data)*per.in)
error1 = predDrilling(data, prod, samp)
errorM[iter,1:2] = error1
error2 = mypred(data, prod, samp)
errorM[iter,3:4] = error2
}
return(errorM)
}
library(glmnet)
eProd[1]
eProd.kun[1]
View(error.kun)
mean(error.kun[,3])
mean(error.kun[,4])
mean(error.kun[,5])
compare <- function(data, prod, iterN){
errorM = matrix(0, iterN, 4)
for(iter in 1:iterN){
set.seed(1976+iter)
samp<-sample(1:nrow(data),nrow(data)*per.in)
error1 = predDrilling(data, prod, samp)
errorM[iter,1:2] = error1
error2 = mypred(data, prod, samp)
errorM[iter,3:4] = error2
}
return(errorM)
}
Dril.error = compare(datP.use,eProd,2);
Kun.error = compare(datP.use.kun,eProd,2);
Dril.error
kun.error
Kun.error
samp.test = sample(1:nrow(datP.use.kun),nrow(datP.use.kun)*0.8)
Dril.error = compare(datP.use,Prod,2);
Kun.error = compare(datP.use.kun,Prod,2);
Dril.error = compare(datP.use,prod,2);
Kun.error = compare(datP.use.kun,prod,2);
Dril.error
Kun.error
mean(Kun.error)
mean(Kun.error[,1])
mean(Dril.error[,1])
mean(Dril.error[,3])
mean(Kun.error[,3])
mean(Dril.error[,4])
mean(Dril.error[,2])
Dril.error = compare(datP.use,prod,1000);
Kun.error = compare(datP.use.kun,prod,1000);
save.image("~/Documents/course_project/digeo/myproject/kun_compare_result.RData")
Dril.error = compare(datP.use,prod,10)
Dril.error = compare(datP.use,prod,100)
compare <- function(data, prod, iterN){
errorM = matrix(0, iterN, 4)
for(iter in 1:iterN){
set.seed(1976+iter+100)
samp<-sample(1:nrow(data),nrow(data)*per.in)
error1 = predDrilling(data, prod, samp)
errorM[iter,1:2] = error1
error2 = mypred(data, prod, samp)
errorM[iter,3:4] = error2
}
return(errorM)
}
Dril.error1 = compare(datP.use,prod,200)
save.image("~/Documents/course_project/digeo/myproject/templeData.RData")
library(foobar)
load("~/Documents/Research/political_science/factor_model/01-1803CorpDTM4546.RData")
library(BayesLogit)
library(mvtnorm)
library(MCMCpack)
library(mnormt)
library(MSBVAR)
library(msm)
DTM = reformDTM
NR = as.numeric(DTM[4])
NC = as.numeric(DTM[5])
totl = length(DTM[1]$i)
YY = matrix(0,NR,NC)
for(index in 1:totl){
YYi = as.numeric(DTM[1]$i[index])
YYj = as.numeric(DTM[2]$j[index])
YY[YYi,YYj] = as.numeric(DTM[3]$v[index])
}
iter1000result = rcpparma_hello_world(YY,5,1000,0);
BBn = iter1000result$BBn;
FFn = iter1000result$FFn;
Alfn = iter1000result$Alfn;
Gamn = iter1000result$Gamn;
par1 = 4
par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))
ts.plot(Gamn[par1,],xlab="iterations",ylab="")
acf(Gamn[par1,],main="")
hist(Gamn[par1,],prob=T,main="",xlab="")
par1 = 1
par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))
ts.plot(Gamn[par1,],xlab="iterations",ylab="")
acf(Gamn[par1,],main="")
hist(Gamn[par1,],prob=T,main="",xlab="")
par1 = 10
par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))
ts.plot(Gamn[par1,],xlab="iterations",ylab="")
acf(Gamn[par1,],main="")
hist(Gamn[par1,],prob=T,main="",xlab="")
par1 = 2
par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))
ts.plot(Alfn[par1,],xlab="iterations",ylab="")
acf(Alfn[par1,],main="")
hist(Alfn[par1,],prob=T,main="",xlab="")
par1 = 10
par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))
ts.plot(Alfn[par1,],xlab="iterations",ylab="")
acf(Alfn[par1,],main="")
hist(Alfn[par1,],prob=T,main="",xlab="")
par1 = 10
par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))
ts.plot(Alfn[par1,600:1000],xlab="iterations",ylab="")
acf(Alfn[par1,600:1000],main="")
hist(Alfn[par1,600:1000],prob=T,main="",xlab="")
lmB = matrix(0,P,K)
P=4467;
K=5;
index.drawn=601:1000
for(i in 1:P){
for(j in 1:K){
lmB[i,j] = mean(BBn[i,j,index.drawn])
}
}
P=4467;
K=5;
lmB = matrix(0,P,K)
for(i in 1:P){
for(j in 1:K){
lmB[i,j] = mean(BBn[i,j,index.drawn])
}
}
par2 = 5
sort1 = sort(lmB[,par2],decreasing=TRUE,index.return=T)
MostTerm1=DTM[6][1]$dimnames$Terms[sort1$ix[1:25]]
print(MostTerm1)
par2 = 1
sort1 = sort(lmB[,par2],decreasing=TRUE,index.return=T)
MostTerm1=DTM[6][1]$dimnames$Terms[sort1$ix[1:25]]
print(MostTerm1)
par2 = 2
sort1 = sort(lmB[,par2],decreasing=TRUE,index.return=T)
MostTerm1=DTM[6][1]$dimnames$Terms[sort1$ix[1:25]]
print(MostTerm1)
index.drawn = 601:1000
meanAlf = rep(0,P)
for(i in 1:P){
meanAlf[i] = mean(Alfn[i,index.drawn])
}
sort2 = sort(meanAlf,decreasing=TRUE,index.return=T)
MostTerm2=DTM[6][1]$dimnames$Terms[sort2$ix[1:25]]
MostTerm2
hist(Gamn[,1000])
hist(Alfn[,1000])
range(Alfn[,1000])
which(Alfn[,1000] == max(Alfn[,1000]))
hist(Alfn[-1937,1000])
which(Alfn[,1000] == max(Alfn[-1937,1000]))
hist(Alfn[-c(1937,1918),1000])
plot(Alfn[,1000])
result3000 = rcpparma_hello_world(YY,5,1000,1000);
BBn = result3000$BBn;
FFn = result3000$FFn;
Alfn = result3000$Alfn;
Gamn = result3000$Gamn;
#plot Gammar[par1]
par1 = 10
par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))
ts.plot(Gamn[par1,],xlab="iterations",ylab="")
acf(Gamn[par1,],main="")
hist(Gamn[par1,],prob=T,main="",xlab="")
par1 = 10
par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))
ts.plot(Alfn[par1,600:1000],xlab="iterations",ylab="")
acf(Alfn[par1,600:1000],main="")
hist(Alfn[par1,600:1000],prob=T,main="",xlab="")
P=4467;
K=5;
lmB = matrix(0,P,K)
index.drawn = (Nburn+1):Ndrawn
index.drawn=601:1000
for(i in 1:P){
for(j in 1:K){
lmB[i,j] = mean(BBn[i,j,index.drawn])
}
}
P=4467;
K=5;
lmB = matrix(0,P,K)
#index.drawn = (Nburn+1):Ndrawn
index.drawn=601:1000
for(i in 1:P){
for(j in 1:K){
lmB[i,j] = mean(BBn[i,j,index.drawn])
}
}
par2 = 2
sort1 = sort(lmB[,par2],decreasing=TRUE,index.return=T)
MostTerm1=DTM[6][1]$dimnames$Terms[sort1$ix[1:25]]
print(MostTerm1)
par2 = 1
sort1 = sort(lmB[,par2],decreasing=TRUE,index.return=T)
MostTerm1=DTM[6][1]$dimnames$Terms[sort1$ix[1:25]]
print(MostTerm1)
index.drawn = 601:1000
meanAlf = rep(0,P)
for(i in 1:P){
meanAlf[i] = mean(Alfn[i,index.drawn])
}
sort2 = sort(meanAlf,decreasing=TRUE,index.return=T)
MostTerm2=DTM[6][1]$dimnames$Terms[sort2$ix[1:25]]
MostTerm2
par1 = 2
par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))
ts.plot(Gamn[par1,601:1000],xlab="iterations",ylab="")
acf(Gamn[par1,601:1000],main="")
hist(Gamn[par1,601:1000],prob=T,main="",xlab="")
save.image("~/Documents/Research/political_science/factor_model/11May.RData")
test1 = NBfactor(matrix(1,3,4),2,1,0)
test1
install.packages("~/Documents/Research/political_science/foobar_1.0.tar.gz", repos = NULL, type = "source")
