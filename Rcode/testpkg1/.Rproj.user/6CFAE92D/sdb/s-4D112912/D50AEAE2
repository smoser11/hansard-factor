{
    "contents" : "#include \"NBfactor.h\"\n#include <iostream>\n\n#include \"RNG.h\"\n#include \"PolyaGamma.hpp\"\n#include <exception>\n\n#ifdef USE_R\n#include \"R.h\"\n#include \"Rmath.h\"\n#endif\n\nusing namespace Rcpp ;\nusing namespace RcppArmadillo;\nusing namespace std;\n\nvoid rpg_devroye(double *x, int *n, double *z, int *num)\n{\n  \n  RNG r;\n  PolyaGamma pg;\n\n  #ifdef USE_R\n  GetRNGstate();\n  #endif\n\n  for(int i=0; i < *num; ++i){\n    x[i] = pg.draw(n[i], z[i], r);\n  }\n\n  #ifdef USE_R\n  PutRNGstate();\n  #endif\n  \n} // rpg\n\n// [[Rcpp::export]]\nSEXP NBfactor(SEXP Ys, int ntopic, int Ndrawn, int Nburnn){\n  \n\tRcpp::NumericMatrix Yr(Ys); \t\t\t\t//\tCreate Rcpp matrix from SEXP\n\tint N = Yr.nrow(), P = Yr.ncol();\t\t\t//\tdim(YY)\n\n\tarma::mat YY(Yr.begin(), N, P, false);   \t// reuses memory and avoids extra copy\n\n\tint K = ntopic; \t\t\t\t\t\t\t\t//\tNo of topics\n\n\t// Parameter Setting\n\tarma::mat V = arma::eye(K,K);\n\tarma::mat V0 = arma::eye(K,K);\n\n\tdouble a = 0.01;\n\tint h0 = 6, niu_a = 10, niu_alpha = 10;\n\n\tarma::colvec niu = 0.98 * arma::ones(K);\n\tarma::colvec q = 0.9 * arma::ones(K);\n\n\tdouble h=1.0, c_s = 1.0, d_s = 1.0;\n\n\t// Initialization\n\tRcpp::NumericVector drawsB = Rcpp::rnorm(P*K,0,1);\n\tarma::mat B(drawsB.begin(),P,K,false);\n\n\tRcpp::NumericVector drawsf = Rcpp::rnorm(N*K,0,1);\n\tarma::mat f(drawsf.begin(),N,K,false);\n\t\n\tRcpp::NumericVector drawsal = Rcpp::rnorm(P,0,niu_alpha);\n\tarma::rowvec alpha(drawsal.begin(),P,false);\n\tRcpp::NumericVector drawga = Rcpp::rnorm(N,0,1);\n\tarma::colvec gamma(drawga.begin(),N,false);\n\n\tarma::mat Psi = arma::zeros(N,P);\n\tarma::mat Omega = arma::zeros(N,P);\n\tarma::mat Z = arma::zeros(N,P);\n\tarma::mat zhat = arma::zeros(N,P);\n\n\t//Gibbs Sampler\n\t//int Ndrawn = 5; \n\t//int Nburnn = 0;\n\n\t// Store Parameter\n\tarma::cube BBn = arma::zeros(P,K,Ndrawn);\n\tarma::cube FFn = arma::zeros(N,K,Ndrawn);\n\n\tarma::mat Alfn = arma::zeros(P,Ndrawn);\n\tarma::mat Gamn = arma::zeros(N,Ndrawn);\n\n\tdouble test;\n\n\t//Iteration\n\tfor (int iter = 0; iter < (Ndrawn+Nburnn); ++iter)\n\t{\n\t\t//Calculate Psi\n\t\tfor (int i = 0; i < N; ++i)\n\t\t{\n\t\t\tarma::rowvec temp(P);\n\t\t\ttemp.fill(gamma[i]);\n\t\t\tPsi.row(i) = alpha + temp + arma::trans(B*arma::trans(f.row(i))); \n\t\t}\n\n\t\t//Sample omega\n\t\tfor (int i = 0; i < N; ++i)\n\t\t{\n\t\t\tfor (int j = 0; j < P; ++j)\n\t\t\t{\n        \n          double *xx;\n          int *nn;\n          double *zz;\n          int *numm;\n    \n          double xxx=0.5;\n          int nnn=YY(i,j)+h;\n          double zzz=Psi(i,j);\n          int numnum=1;\n    \n          xx=&xxx;\n          nn = &nnn;\n          zz = &zzz;\n          numm = &numnum;\n\n          rpg_devroye(xx,nn,zz,numm);     \n             \n\t\t\t\t  Omega(i,j) = *xx;\n\t\t\t}\n\t\t}\n\n\t\t//Calculate Z\n\t\tfor (int i = 0; i < N; ++i)\n\t\t{\n\t\t\tfor (int j = 0; j < P; ++j)\n\t\t\t{\n\t\t\t\tZ(i,j) = (YY(i,j)-h)/(2*Omega(i,j));\n\t\t\t}\n\t\t}\n\n\t\t//Sample gamma_i\n\t\tfor (int i = 0; i < N; ++i)\n\t\t{\n\t\t\tdouble Vgamma = 1/(1+sum(Omega.row(i)));\n\n\t\t\tdouble Mgamma = Vgamma*(a+arma::as_scalar((Z.row(i)-alpha-arma::trans(B*arma::trans(f.row(i))))*arma::trans(Omega.row(i))));\n\t\t\t//double Mgamma = Vgamma*(a+)\n\t\t\t//double Mgamma = Vgamma*(a+ sum(arma::trans(B*arma::trans(f.row(i)))));\n\t\t\tgamma(i) = as<double>(Rcpp::rnorm(1,Mgamma,sqrt(Vgamma)));\n\t\t\t \n\t\t}\n\n\t\t//Sample a\n\t\tdouble Va = 1/(N+1/niu_a);\n\t\tdouble Ma = Va*sum(gamma);\n\t\ta = as<double>(Rcpp::rnorm(1,Ma,sqrt(Va)));\n\n\t\t//Sample alpha_j\n\t\tfor (int j = 0; j < P; ++j)\n\t\t{\n\t\t\tdouble Valpha = 1/(1/niu_alpha+sum(Omega.col(j)));\n\t\t\tdouble Malpha = Valpha*arma::as_scalar((arma::trans((Z.col(j)-gamma-f*arma::trans(B.row(j))))*Omega.col(j)));\n\t\t\t//double Malpha = Valpha*sum((Z.col(j)-gamma-f*arma::trans(B.row(j)))%Omega.col(j));\n\t\t\talpha(j) = as<double>(Rcpp::rnorm(1,Malpha,sqrt(Valpha)));\n\t\t}\n\n\t\t//Sample f[i,]\n\t\tfor (int i = 0; i < N; ++i)\n\t\t{\n\t\t\tarma::rowvec temp(P);\n\t\t\ttemp.fill(gamma[i]);\n\t\t\tarma::mat Ome = diagmat(Omega.row(i));\n\t\t\tarma::mat Vf = arma::inv(arma::inv(V)+arma::trans(B)*Ome*B);\n\t\t\tarma::colvec Mf = Vf*arma::trans(B)*Ome*arma::trans(Z.row(i)-alpha-temp);\n\t\t\tRcpp::NumericVector drawtemp = Rcpp::rnorm(K,0,1);\n\t\t\tarma::colvec ftemp(drawtemp.begin(),K,false);\n\t\t\tf.row(i) = arma::trans(Mf+chol(Vf)*ftemp);\n\n\t\t}\n\n\t\t//Sample V\n\n\t\t//Sample B\n\t\tfor (int s = 0; s < K; ++s)\n\t\t{\n\t\t\tarma::mat Bs = B;\n\t\t\tBs.shed_col(s);\n\t\t\tarma::mat fs = f;\n\t\t\tfs.shed_col(s);\n\t\t\tdouble Vhat, bhat, prob1,qhat;\n\t\t\tfor (int i = 0; i < N; ++i)\n\t\t\t{\n\t\t\t\tarma::rowvec temp(P);\n\t\t\t\ttemp.fill(gamma[i]);\n\t\t\t\tzhat.row(i) = Z.row(i)-alpha-temp-arma::trans(Bs*arma::trans(fs.row(i)));\n\t\t\t}\n\t\t\tfor (int j = 0; j < P; ++j)\n\t\t\t{\n\t\t\t\tif (j<s)\n\t\t\t\t{\n\t\t\t\t\tB(j,s) = 0.0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tVhat = 1/(1/niu(s)+sum(Omega.col(j)%f.col(s)%f.col(s)));\n\t\t\t\t\tbhat = Vhat*sum(f.col(s)%Omega.col(j)%zhat.col(j));\n\t\t\t\t\ttest = bhat;\n\t\t\t\t\tprob1 = Rcpp::dnorm(NumericVector::create(0.0),test*1.0,sqrt(Vhat))[0];\n\t\t\t\t\tif(prob1 < 0.00001){\n\t\t\t\t\t\tqhat = 1.0;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tdouble rhat = Rcpp::dnorm(NumericVector::create(0.0),0.0,niu(s)*1.0)[0]/prob1;\n\t\t\t\t\t\tqhat = rhat/((1.0-q(s))/q(s)+rhat);\n\t\t\t\t\t}\n\n\t\t\t\t\t//sample B_js\n\t\t\t\t\tif(j == s){\n            \n            RNG rr;\n            \n            B[j,s] = rr.tnorm(0.0, bhat, sqrt(Vhat));\n            \n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tdouble rnum = as<double>(Rcpp::runif(1));\n\t\t\t\t\t\tif(rnum < qhat){\n\t\t\t\t\t\t\tB(j,s) = as<double>(Rcpp::rnorm(1,bhat,sqrt(Vhat)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tB(j,s) = 0.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//draw niu\n\t\tarma::colvec ms = arma::zeros(K);\n\t\tfor (int s = 0; s < K; ++s)\n\t\t{\n\t\t\tfor (int j = (s+1); j < P; ++j)\n\t\t\t{\n\t\t\t\tif(abs(B(j,s))>1e-100){\n\t\t\t\t\tms(s) = ms(s)+1.0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdouble temp = arma::as_scalar(arma::trans(B.col(s))*B.col(s));\n\t\t\tniu(s) = 1/as<double>(Rcpp::rgamma(1,(2+ms(s))/2,(2.0+temp)/2));\n\n\t\t\t//draw q\n\t\t\tq(s) = as<double>(Rcpp::rbeta(1,1+ms(s),1.0+P-s-ms(s)));\n\n\t\t}\n\n\t\t//Store parameter\n\t\tif(iter > (Nburnn-1)){\n\t\t\tBBn.slice(iter-Nburnn) = B;\n\t\t\tFFn.slice(iter-Nburnn) = f;\n\t\t\tAlfn.col(iter-Nburnn) = arma::trans(alpha);\n\t\t\tGamn.col(iter-Nburnn) = gamma;\n\n\t\t}\n\n\t\tcout<<\"\\n iter = \"<<iter;\n\n\t\t\n\n\n\n\n\n\n\t\n\n\t}\n\t\n\n\n\n\n\n\n\n\n\n\treturn Rcpp::List::create(\n        //Rcpp::Named(\"testB\") = Vgamma,\n        Rcpp::Named(\"BBn\") = BBn,\n        Rcpp::Named(\"FFn\") = FFn,\n        Rcpp::Named(\"Alfn\") = Alfn,\n        Rcpp::Named(\"Gamn\") = Gamn\n        //Rcpp::Named(\"stderr\")       = stderrest,\n        //Rcpp::Named(\"testFunction\") = f(3)\n    ) ;\t\n\n\n\n\t\n\n\t\n\n\n\n\n\n}\n\n\n\n",
    "created" : 1368411842989.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3762903428",
    "id" : "D50AEAE2",
    "lastKnownWriteTime" : 1368412173,
    "path" : "~/Documents/Research/political_science/testpkg1/src/NBfactor.cpp",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "cpp"
}