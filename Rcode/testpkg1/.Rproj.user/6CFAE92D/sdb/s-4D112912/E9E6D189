{
    "contents" : "load(\"01-1803CorpDTM4546.RData\")\n\nlibrary(BayesLogit)\nlibrary(mvtnorm)\nlibrary(MCMCpack)\nlibrary(mnormt)\nlibrary(MSBVAR)\nlibrary(msm)\n\n\nDTM = reformDTM\nNR = as.numeric(DTM[4])\nNC = as.numeric(DTM[5])\ntotl = length(DTM[1]$i)\nYY = matrix(0,NR,NC)\nfor(index in 1:totl){\n  YYi = as.numeric(DTM[1]$i[index])\n  YYj = as.numeric(DTM[2]$j[index])\n  YY[YYi,YYj] = as.numeric(DTM[3]$v[index])\n}\n\n#select.doc = sample(1:NR,300,replace=F)\n#YY = YY[select.doc,]\n\n\n\n# Data set properties\nN = dim(YY)[1]\nP = dim(YY)[2]\n\n# No. of topics\nK = 10\n\n# Model setting\n#  NB model\n# YY_ij  ~ NB(h, exp(Psi_ij)/1+exp(Psi_ij)) i = 1...N, j = 1...p\n# omega_ij ~ PG(YY_ij+h, Psi_ij)\n# z_ij = YY_ij-h/2omega_ij\n#\n#  Factor Model\n#  Ome_i = diag(omega_i1, omega_i2,...omega_ip)\n#  z_i ~ N(alpha + gamma_i*1 +    B*f_i, Ome_i^-1) i = 1...N\n#  p*1     p*1             p*1  p*k k*1    p*p\n#\n#  Prior of Parameter f, gamma, alpha, B\n#  f_i ~ N(0, V)\n#  gamma_i ~ N(a, 1)\n#  alpha_j ~ N(0, niu_alpha)\n#  b_js ~ q_s*N(0,niu_s) + (1-q_s)*delta0\n#\n#  Hyperparameter Setting\n#  V~ IW(V0, h0)\n#  a~ N(0, niu_a)\n#  niu_s~ IG(c_s, c_s*d_s/2)\n#  q_s ~ Beta(1, 1)\n\n#  Parameter Setting\nV = diag(1, K)\nV0 = diag(1,K)\nh0=6\na = 0.01\nniu_a = 10\nniu_alpha = 10\nniu = rep(0.98,K)\nq = rep(0.9,K)\nh = 1\nc_s = 2\nd_s = 1\n\n#  Initialization\nB = matrix(rnorm(P*K,0,1), nrow=P, ncol=K)\nf = matrix(rnorm(N*K,0,1), nrow=N, ncol=K)\nalpha = rnorm(P, 0, niu_alpha)\ngamma = rnorm(N, 0, 1)\nPsi = matrix(0, N, P)\nOmega = matrix(0, N, P)\nZ = matrix(0, N, P)\nzhat = matrix(0,N,P)\n\n\n# Gibbs Sampler\nNdrawn = 1000\nNburnn = 0\n\n# Store parameter\n BBn = array(0,c(P,K,Ndrawn))\n FFn = array(0,c(N,K,Ndrawn))\n Alfn = matrix(0,P,Ndrawn)\n Gamn = matrix(0,N,Ndrawn)\n\n\nfor(iter in 1:(Ndrawn+Nburnn)){\n  \n  # Calculate Psi\n  for(i in 1:N){\n    Psi[i,] = alpha+gamma[i]*rep(1,P)+B%*%f[i,]\n  }\n  \n  # Sample omega\n  for(i in 1:N){\n    for(j in 1:P){\n      Omega[i,j] = rpg.devroye(1, YY[i,j]+h, Psi[i,j])\n    }\n  }\n  #cat(\"Omega[3,4]=\",Omega[3,4])\n  \n  # Calculate Z\n  for(i in 1:N){\n    for(j in 1:P){\n      Z[i,j] = (YY[i,j]-h)/(2*Omega[i,j])\n    }\n  }\n  \n  # Sample gamma_i\n  for(i in 1:N){\n    Vgamma = 1/(1+sum(Omega[i,]))\n    Mgamma = Vgamma*(a+sum((Z[i,]-alpha-B%*%f[i,])*Omega[i,]))\n    gamma[i] = rnorm(1,Mgamma,Vgamma)\n      \n  }\n  \n  # Sample a\n  Va = 1/(N+1/niu_a)\n  Ma = Va*sum(gamma)\n  a = rnorm(1,Ma,Va)\n  \n  \n  # Sample alpha_j\n  TempS = matrix(0,N,P)\n  for(i in 1:N){\n    TempS[i,] = (Z[i,]-gamma[i]*rep(1,P)-B%*%f[i,])*Omega[i,]\n  }\n  for(j in 1:P){\n    Valpha = 1/(1/niu_alpha+sum(Omega[,j]))\n    Malpha = Valpha*(colSums(TempS)[j])\n    alpha[j] = rnorm(1,Malpha,Valpha)\n    \n      \n  }\n  \n  \n  # Sample f[,k]\n  for(i in 1:N){\n    Ome = diag(Omega[i,])\n    Vf = solve(solve(V)+t(B)%*%Ome%*%B)\n    Mf = Vf%*%t(B)%*%Ome%*%(Z[i,]-alpha-gamma[i]*rep(1,P))\n    f[i,] = rmultnorm(1,Mf,Vf)\n    \n  }\n  #cat(\"Vf[2,1]=\",Vf[2,1])\n  #cat(\"Mf[2,1]=\",Mf[2,1])\n  \n  # Sample V\n  PAR1 = V0+t(f)%*%f\n  PAR2 = N+h0\n  V = riwish(PAR2, PAR1)\n  \n  # Sample B\n  for(s in 1:K){\n    Bs = subset(B,select = -s)\n    for(i in 1:N){\n      zhat[i,] = Z[i,]-alpha-gamma[i]*rep(1,P)-Bs%*%f[i,-s]\n    }\n    for(j in 1:P){\n      if(j < s){\n        B[j,s]=0\n      }\n      else{\n      Vhat = 1/(1/niu[s]+sum(Omega[,j]*f[,s]*f[,s]))\n      bhat = Vhat*(sum(f[,s]*Omega[,j]*zhat[,j]))\n      \n      prob1 = dnorm(0,bhat,Vhat)\n      if(prob1 < 0.00001){\n        qhat = 1\n        \n      }\n      else{\n        rhat = dnorm(0,0,niu[s])/prob1\n        qhat = rhat/((1-q[s])/q[s]+rhat)\n      }\n     \n      \n      # sample B_js\n      if(j == s){\n            B[j,s] = rtnorm(1,bhat,sqrt(Vhat),lower=0)\n               \n      }\n      else{\n        rnum = runif(1)\n        if(rnum<qhat){\n          B[j,s] = rnorm(1,bhat,Vhat)\n        }\n        else{\n          B[j,s] = 0\n        }\n        \n      }\n      \n      \n      \n      \n      \n      #print(B[j,s])\n    \n      }\n      \n    }\n      \n    \n  }\n  \n  ### draw niu\n  ms=rep(0,K)\n  for(s in 1:K){\n    for(j in (s+1):P){\n      if(abs(B[j,s])>1e-100){\n        ms[s] = ms[s]+1\n      }\n    }\n    niu[s] = 1/(rgamma(1,(2+ms[s])/2,(2+as.numeric(t(B[,s])%*%B[,s]))/2))\n    \n    \n  }\n  \n  \n  ### draw q\n  for(s in 1:K){\n      q[s] = rbeta(1,1+ms[s],1+P-s-ms[s])\n     \n    }\n    \n    \n    \n    \n    \n  \n  \n  \n  if(iter > Nburnn){\n    BBn[,,(iter-Nburnn)] = B\n    FFn[,,(iter-Nburnn)] = f\n    Alfn[,(iter-Nburnn)] = alpha\n    Gamn[,(iter-Nburnn)] = gamma\n    \n    \n    \n  }  \n  \n  \n  \n  \n  print(B[4,4])\n  if(iter%%100 == 0){print(iter)}\n  \n  \n}\n\nBBn = result3000$BBn;\nFFn = result3000$FFn;\nAlfn = result3000$Alfn;\nGamn = result3000$Gamn;\n\n\n\n\n#plot parameter\nif(0){\n  #plot Gammar[par1]\n  par1 = 2\n  par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))\n  ts.plot(Gamn[par1,601:1000],xlab=\"iterations\",ylab=\"\")\n  acf(Gamn[par1,601:1000],main=\"\")\n  hist(Gamn[par1,601:1000],prob=T,main=\"\",xlab=\"\")\n}\n\nif(0){\n  id = 1:1400 \n #plot Alfer[par1]\n  par1 = 10\n  par(mfrow=c(3,1),mar=c(4, 4, 2, 0.5))\n  ts.plot(Alfn[par1,600:1000],xlab=\"iterations\",ylab=\"\")\n  acf(Alfn[par1,600:1000],main=\"\")\n  hist(Alfn[par1,600:1000],prob=T,main=\"\",xlab=\"\")\n}\n\n\n# you can also plot the parameter first, then decide how many draws you want to burn\nNburn = 600\n\n# show the loading matrix\nif(0){\n\n #calculate mean of drawn B's\n  P=4467;\n  K=5;\n  lmB = matrix(0,P,K)\n  #index.drawn = (Nburn+1):Ndrawn\n  index.drawn=601:1000\n  for(i in 1:P){\n    for(j in 1:K){\n      lmB[i,j] = mean(BBn[i,j,index.drawn])\n    }\n  }\n\n # show the most popular terms in par2 th topic\n  par2 = 1\n  sort1 = sort(lmB[,par2],decreasing=TRUE,index.return=T)\n\n  MostTerm1=DTM[6][1]$dimnames$Terms[sort1$ix[1:25]]\n  print(MostTerm1)\n\n}\n\n# show alf: term-wise intercept\nif(0){\n  index.drawn = 601:1000  \n  meanAlf = rep(0,P)\n  for(i in 1:P){\n  meanAlf[i] = mean(Alfn[i,index.drawn])\n  }\n  sort2 = sort(meanAlf,decreasing=TRUE,index.return=T)\n  MostTerm2=DTM[6][1]$dimnames$Terms[sort2$ix[1:25]]\n  MostTerm2\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1368128711827.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1408351536",
    "id" : "E9E6D189",
    "lastKnownWriteTime" : 1368411599,
    "path" : "~/Documents/Research/political_science/NB_factorMCMC_updated.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}